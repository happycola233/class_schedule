# -*- coding: utf-8 -*-
# 快速安装需要的库：pip install pywin32 wxpython pandas pywinstyles openpyxl xlrd BlurWindow
import wx  # 导入wxPython库用于创建GUI应用
import ctypes  # 导入ctypes库用于调用底层C接口，主要用于调用Windows API
import pandas as pd  # 导入pandas库用于处理Excel文件
import xlrd  # 导入 xlrd 模块，用来支持.xls文件的解析（此库在本程序代码中未得到体现，但是在pandas库中会被使用）
from datetime import datetime  # 从datetime模块导入datetime类，用于处理日期和时间
import win32api, win32con  # 导入win32api和win32con用于调用Windows API和使用Windows常量
import base64  # 导入base64用于图像的Base64编码和解码
from io import BytesIO  # 导入BytesIO用于在内存中读写bytes
import sys  # 导入sys用于访问与Python解释器紧密相关的变量和函数
import os  # 导入os用于操作系统接口，如文件和目录操作
import configparser # 导入configparser用于处理ini文件

# 根据程序运行方式确定基础目录路径
base_dir = os.path.dirname(sys.executable) if getattr(sys, 'frozen', False) else os.path.dirname(__file__)

# 显示于窗口左上角小图标的Base64编码字符串
iconBase64 = ""

# 获取系统指标
CXBORDER = win32api.GetSystemMetrics(win32con.SM_CXBORDER) # 三维边框的宽度（以像素为单位）
CXEDGE = win32api.GetSystemMetrics(win32con.SM_CXEDGE) # 三维边框的宽度（以像素为单位）
CXFIXEDFRAME = win32api.GetSystemMetrics(win32con.SM_CXFIXEDFRAME) # 窗口周围具有描述文字但不是相当大的（以像素为单位）的框架的粗细。
CXSIZEFRAME = win32api.GetSystemMetrics(win32con.SM_CXSIZEFRAME) # 可调整大小的窗口周边的大小边框的粗细（以像素为单位）。
CYSIZE = win32api.GetSystemMetrics(win32con.SM_CYSIZE) # 窗口中按钮的高度描述文字或标题栏（以像素为单位）。
CYSMCAPTION = win32api.GetSystemMetrics(win32con.SM_CYSMCAPTION) # 小描述文字的高度（以像素为单位）

# 设置DPI感知，确保应用在高DPI屏幕上正确显示
try:
    ctypes.windll.shcore.SetProcessDpiAwareness(2)  # 尝试设置高DPI感知模式，适用于Windows 8.1及更高版本
except AttributeError:
    ctypes.windll.user32.SetProcessDPIAware()  # 如果上述方法失败，使用较旧的方法，适用于Windows 8及以下版本

# Windows API函数和常量的定义，用于修改窗口样式
GWL_STYLE = -16  # 用于Get/SetWindowLong函数的窗口样式标志
WS_POPUP = 0x80000000  # 弹出窗口样式，无边框
DWMWA_WINDOW_CORNER_PREFERENCE = 33  # 设置窗口圆角的属性
DWMWCP_ROUND = 2  # 圆角偏好设置


def create_or_load_config():
    '''创建或加载配置文件'''
    if not os.path.exists(os.path.join(base_dir, 'config.ini')):
        # 使用三引号写入多行文本，包括注释和配置项
        config_text = '''\
[DEFAULT]

# 课程表（.xls或.xlsx）文件路径，可以是相对路径或绝对路径（路径前后不要加引号！）
CourseTablePath = 课程表.xlsx

# 字体
Font = 微软雅黑

# 字体大小（可填：正整数）
FontSize = 20

# 字体粗细（可选值：light, normal, bold）
FontWeight = bold

# 行间距（可填：大于等于0的整数）
LineSpacing = 10

# 字体颜色（RGB格式）
FontColor = 108, 215, 244

# 当前课程字体颜色（RGB格式）
CurrentCourseColor = 255, 124, 59

# 是否隐藏标题栏（布尔值：True / False）（建议值：True）
HideTitleBar = True

# 窗口位置（仅当隐藏标题栏时生效）：距离右边或顶部屏幕边缘的距离，是Windows默认标题栏高度的几倍（可填：大于等于0的整数或小数）
WindowPosition = 0.5

# 边距（课表内容到窗口边缘的距离）（可填：自然数）
Margin = 20

# 检测课表是否需要更新的时间间隔，单位为毫秒（ms）(可填：自然数)
RefreshInterval = 1000

# 是否窗口置顶（布尔值：True / False）
AlwaysOnTop = False

[AcrylicEffect]

# 是否开启窗口亚克力透明效果（布尔值：True / False）
Enabled = True


# 亚克力渲染方式配置（可选：blurWindow 和 pywinstyles）（推荐：blurWindow）

# blurWindow:
# 优点：
# 1. 文字颜色可轻松辨别：与pywinstyles相比，blurWindow渲染模式下，文字不会被亚克力效果覆盖，确保在任何背景色下文字颜色都保持清晰可辨，不受背景影响。
# 2. 可调节透明度和颜色分量：blurWindow允许用户自定义亚克力效果的透明度和颜色，提供了更高的灵活性和个性化选项。
# 缺点：
# 1. 可能出现窗口背景闪红：在一些系统级刷新下（例如资源管理器重启），或者是程序首次启动时（仅当不隐藏标题栏），窗口背景可能会短暂出现红色闪烁现象，此问题暂时未找到解决方案。但请放心，此现象通常情况下并不明显。

# pywinstyles:
# 优点：
# 1. 无闪红现象：使用pywinstyles作为渲染方式时，不会遇到像blurWindow那样的背景红色闪烁问题。

# 缺点：
# 1. 文字颜色可能难以辨识：pywinstyles会使窗口中的文字亚克力化，如果背景是浅色，由于亚克力效果，文字颜色可能变得难以分辨，看上去接近白色。
# 2. 不支持调节透明度和颜色分量：与blurWindow不同，pywinstyles不提供调节亚克力效果的透明度和颜色分量的选项，限制了个性化和适应不同场景的能力。

RenderMode = blurWindow


# 亚克力透明度（范围为0-255的整数，闭区间；数值越低越不透明）（该选项仅当渲染方式选择“blurWindow”时支持）
Opacity = 128

# 亚克力颜色分量（RGB格式）（如果您不清楚此项的作用，请不要修改！）（该选项仅当渲染方式选择“blurWindow”时支持）
AcrylicColorComponents = 0, 0, 0
'''
        with open(os.path.join(base_dir, 'config.ini'), 'w') as configfile:
            configfile.write(config_text.strip())  # 使用.strip()移除首尾的空白行
        # 创建ini配置文件后，读取配置文件
        config.read(os.path.join(base_dir, 'config.ini'))
    else:
        # 文件存在时，读取配置文件
        config.read(os.path.join(base_dir, 'config.ini'))


class MainFrame(wx.Frame):
    # 定义主窗口类，继承自wx.Frame
    def __init__(self, courses, *args, **kw):
        if config['DEFAULT'].getboolean('AlwaysOnTop', False): # 如果配置文件中设置窗口置顶为 True
            if config['DEFAULT'].getboolean('HideTitleBar', True): # 如果隐藏标题栏
                # 初始化窗口，设置为无边框风格，允许自定义形状和边界，隐藏任务栏图标，窗口置顶
                super(MainFrame, self).__init__(*args, **kw, style=wx.FRAME_SHAPED | wx.BORDER_NONE | wx.FRAME_NO_TASKBAR | wx.STAY_ON_TOP)
            else:
                super(MainFrame, self).__init__(*args, **kw, style=wx.DEFAULT_FRAME_STYLE | wx.FRAME_NO_TASKBAR | wx.STAY_ON_TOP)  # 初始化父类，隐藏任务栏图标，窗口置顶
        else:
            if config['DEFAULT'].getboolean('HideTitleBar', True): # 如果隐藏标题栏
                # 初始化窗口，设置为无边框风格，允许自定义形状和边界，隐藏任务栏图标
                super(MainFrame, self).__init__(*args, **kw, style=wx.FRAME_SHAPED | wx.BORDER_NONE | wx.FRAME_NO_TASKBAR)
            else:
                super(MainFrame, self).__init__(*args, **kw, style=wx.DEFAULT_FRAME_STYLE | wx.FRAME_NO_TASKBAR)  # 初始化父类，隐藏任务栏图标
        self.current_date = datetime.today().date()  # 记录当前日期，用于跨夜更新
        self.SetTitle("课程表")  # 设置窗口标题

        '''设置窗口左上角小图标'''
        iconData = base64.b64decode(iconBase64)  # 解码Base64图标字符串
        stream = BytesIO(iconData)  # 将图标数据转换为字节流
        image = wx.Image(stream, wx.BITMAP_TYPE_ANY)  # 从字节流创建图像
        bitmap = wx.Bitmap(image)  # 从图像创建位图
        icon = wx.Icon()  # 创建图标对象
        icon.CopyFromBitmap(bitmap)  # 将位图复制到图标对象
        self.SetIcon(icon)  # 为窗口设置图标

        self.panel = wx.Panel(self)  # 创建一个面板，用于容纳其他控件

        # 在面板self.panel上绑定鼠标按下事件处理器
        self.panel.Bind(wx.EVT_LEFT_DOWN, self.OnMouseDown)
        # 在面板self.panel上绑定鼠标释放事件处理器
        self.panel.Bind(wx.EVT_LEFT_UP, self.OnMouseUp)
        # 在面板self.panel上绑定鼠标移动事件处理器
        self.panel.Bind(wx.EVT_MOTION, self.OnMouseMove)
        # 初始化拖动状态标志为False，表示初始时没有在拖动
        self.dragging = False
        # 初始化鼠标拖动起始位置为None
        self.dragStartPos = None

        # verticalSizer用于垂直排列课程信息，每行一个课程
        self.verticalSizer = wx.BoxSizer(wx.VERTICAL)
        # centeringSizer用于使verticalSizer在窗口中水平居中
        # 这是一个水平布局的sizer，主要用于居中verticalSizer
        self.centeringSizer = wx.BoxSizer(wx.HORIZONTAL)
        # 将垂直布局的sizer（verticalSizer）添加到用于居中的sizer（centeringSizer）中。
        # 使用wx.EXPAND标志让verticalSizer能够在水平方向上扩展，这样它可以填充水平方向上的额外空间。
        # 使用wx.ALL标志并指定一个数值（从配置文件读取的边距值），这个边距值将被应用到所有四个方向（上、下、左、右），
        # 从而在verticalSizer周围创建等大小的边距，确保内容与窗口边缘之间在水平和垂直方向上都有一定的空间。
        # 第二个参数“1”：表示verticalSizer在centeringSizer管理的水平方向上的空间中，将会扩展来占用所有额外可用的空间。如果有多个子元素都设置了非零的比例值，它们将共享额外空间，按照各自的比例值来分配。
        self.centeringSizer.Add(self.verticalSizer, 1, wx.EXPAND | wx.ALL, config['DEFAULT'].getint('Margin', 20))
        # 将包含有垂直sizer的水平sizer（centeringSizer）应用到面板上，由此，所有添加到verticalSizer的控件都会在窗口中水平居中显示
        self.panel.SetSizer(self.centeringSizer)

        '''
        wx.Font(pointSize, family, style, weight, underline=False, faceName="", encoding=wx.FONTENCODING_DEFAULT)

        - `pointSize`：字体的大小（以点为单位）。
        - `family`：字体族，指定字体的总体外观。`wx.FONTFAMILY_DEFAULT`表示使用默认的字体族。
        - `style`：字体样式，可选项包括正常、斜体等。`wx.FONTSTYLE_NORMAL`表示使用正常样式，没有斜体或其他装饰。
        - `weight`：字体的粗细程度。`wx.FONTWEIGHT_BOLD`表示使用粗体字。其他选项包括正常（`wx.FONTWEIGHT_NORMAL`）和轻体（`wx.FONTWEIGHT_LIGHT`）。
        - `underline`：一个布尔值，表示是否在字体下方添加下划线。
        - `faceName`：字体的名称，如“微软雅黑”、“Arial”等。如果系统中存在这个字体，它就会被用于显示文本；如果不存在，wxWidgets会尝试找到最接近的匹配项。
        - `encoding`：字体的编码。默认情况下，使用`wx.FONTENCODING_DEFAULT`，表示选择默认的字符编码。

        '''
        # 读取字体粗细“FontWeight”配置项
        font_weight_config = config['DEFAULT'].get('FontWeight', 'bold')
        if font_weight_config.lower().strip() == "light": # 使用.lower()把字符串中的所有字母转换为小写字母，使用.strip()移除首尾多余空格
            font_weight = wx.FONTWEIGHT_LIGHT
        elif font_weight_config.lower().strip() == "normal":
            font_weight = wx.FONTWEIGHT_NORMAL
        else: # 只要不是前两种，都使用粗体
            font_weight = wx.FONTWEIGHT_BOLD

        self.font = wx.Font(config['DEFAULT'].getint('FontSize', 20), wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, font_weight, False, config['DEFAULT'].get('Font', '微软雅黑'))  # 创建字体对象
        self.courses = courses  # 保存课程数据
        self.textCtrls = []  # 初始化文本控件列表
        self.load_courses_for_today()  # 加载今日课程并创建文本控件

        screenWidth, screenHeight = wx.DisplaySize()  # 获取屏幕尺寸
        windowSize = self.GetSize()  # 获取窗口尺寸

        if config['DEFAULT'].getboolean('HideTitleBar', True): # 如果隐藏标题栏
            # 根据缩放比例和系统指标调整窗口位置，使窗口位于右上角
            self.SetPosition((screenWidth - windowSize[0] - int((CYSIZE + CYSMCAPTION) * config['DEFAULT'].getfloat('WindowPosition', 0.5)), int((CYSIZE + CYSMCAPTION) * config['DEFAULT'].getfloat('WindowPosition', 0.5)) ))  # 调整窗口位置
        else:
            # 根据缩放比例和系统指标调整窗口位置，使标题栏位于屏幕外
            self.SetPosition((screenWidth - windowSize[0] + CXBORDER + CXEDGE + CXFIXEDFRAME + CXSIZEFRAME, - CYSIZE - CYSMCAPTION))  # 调整窗口位置

        self.Bind(wx.EVT_SHOW, self.on_show)  # 绑定窗口显示事件

        # 设置定时器，用于定时更新当前课程段的显示
        self.timer = wx.Timer(self)  # 创建定时器
        self.Bind(wx.EVT_TIMER, self.update_current_period, self.timer)  # 绑定定时器事件
        self.timer.Start(config['DEFAULT'].getint('RefreshInterval', 1000))  # 设置定时器间隔为1000毫秒（1秒钟），以检查日期变化

    def OnMouseDown(self, event):
        # 当鼠标按下时调用
        self.dragging = True  # 设置拖动状态为True，表示开始拖动
        self.dragStartPos = event.GetPosition()  # 获取并记录鼠标按下的初始位置
        self.panel.CaptureMouse()  # 捕获鼠标，确保在拖动过程中鼠标事件由面板接收
        event.Skip()  # 允许事件继续传递给其他可能的处理器

    def OnMouseUp(self, event):
        # 当鼠标释放时调用
        if self.dragging:
            # 如果当前处于拖动状态
            self.dragging = False  # 设置拖动状态为False，表示结束拖动
            if self.panel.HasCapture():
                # 如果当前面板捕获了鼠标
                self.panel.ReleaseMouse()  # 释放鼠标捕获
        event.Skip()  # 允许事件继续传递

    def OnMouseMove(self, event):
        # 当鼠标移动时调用
        if self.dragging and event.Dragging():
            # 如果处于拖动状态，并且鼠标正在拖动（即鼠标按下并移动）
            newPos = event.GetPosition()  # 获取鼠标当前位置
            displacement = self.dragStartPos - newPos  # 计算鼠标移动的位移
            self.SetPosition(self.GetPosition() - displacement)  # 更新窗口位置
        event.Skip()  # 允许事件继续传递

    def on_show(self, event):
        # 处理窗口显示事件
        if self.IsShown():  # 如果窗口显示
            if config['DEFAULT'].getboolean('HideTitleBar', True): # 如果隐藏标题栏
                self.set_round_corners()  # 调用设置圆角的方法
            if config.getboolean('AcrylicEffect', 'Enabled', fallback=True): # 如果开启窗口亚克力透明效果
                self.apply_acrylic_effect()  # 应用亚克力Acrylic效果
            self.update_current_period(None)  # 立即更新当前课程段的显示

    def set_round_corners(self):
        hwnd = self.GetHandle()  # 获取窗口的句柄

        # 获取当前窗口的样式并添加WS_POPUP样式来移除标题栏
        style = ctypes.windll.user32.GetWindowLongW(hwnd, GWL_STYLE)
        new_style = style | WS_POPUP
        ctypes.windll.user32.SetWindowLongW(hwnd, GWL_STYLE, new_style)

        # 设置窗口的圆角效果，使用DWM API
        preference = DWMWCP_ROUND
        ctypes.windll.dwmapi.DwmSetWindowAttribute(hwnd, DWMWA_WINDOW_CORNER_PREFERENCE, ctypes.byref(ctypes.wintypes.DWORD(preference)), ctypes.sizeof(ctypes.wintypes.DWORD))

    def apply_acrylic_effect(self):
        if config.get('AcrylicEffect', 'RenderMode', fallback='blurWindow') == "pywinstyles": # 如果亚克力渲染方式为使用 pywinstyles 库
            import pywinstyles  # 导入pywinstyles库，用于给wxPython窗口应用亚克力效果
            # 应用Windows Aero风格
            pywinstyles.apply_style(self, style="aero")  # 应用Aero窗口样式（由于pywinstyles库的亚克力效果与本程序存在兼容性问题，使用显示效果几乎相同的Aero效果）
        else: # 只要配置文件中的值不是pywinstyles，都使用 blurWindow 库进行渲染
            import BlurWindow.blurWindow  # 导入BlurWindow库，用于给wxPython窗口应用亚克力效果
            def rgba_to_hex(rgba):
                """
                将RGBA颜色值转换为十六进制格式的字符串。

                参数:
                - rgba: 四元组，包含红色、绿色、蓝色和透明度值（范围均为0-255）。

                返回:
                - 一个表示颜色的十六进制字符串，格式为"#AARRGGBB"。
                """
                # 使用字符串格式化，将RGBA值转换为十六进制字符串。注意顺序为透明度、蓝色、绿色、红色。
                return "#{:02x}{:02x}{:02x}{:02x}".format(rgba[3], rgba[2], rgba[1], rgba[0])

            # 设置面板的背景颜色为灰色（使用RGB颜色值）
            self.panel.SetBackgroundColour(wx.Colour(100, 100, 100))
            # 获取窗口的句柄。句柄是一个指向窗口的指针，用于在底层API调用中标识窗口。
            hwnd = self.GetHandle()
            # 获取亚克力颜色分量
            r, g, b = map(int, config.get('AcrylicEffect', 'AcrylicColorComponents', fallback='0, 0, 0').split(','))
            a = config.getint('AcrylicEffect', 'Opacity', fallback=128) # 获取亚克力透明度，作为RGBA中的Alpha通道
            # 调用rgba_to_hex函数转换为16进制
            custom_hex_color = rgba_to_hex((r, g, b, a))  # RGBA值
            BlurWindow.blurWindow.GlobalBlur(hwnd, hexColor=custom_hex_color, Acrylic=True) # 应用GlobalBlur效果到当前窗口，使用Acrylic模式和自定义的颜色值。


    def update_current_period(self, event):
        # 检查日期是否发生变化，如果是，则重新加载课程数据
        new_date = datetime.today().date()
        if self.current_date != new_date:
            self.current_date = new_date  # 更新记录的当前日期
            self.load_courses_for_today()  # 重新加载今日课程并更新显示

        # 获取当前时间段
        current_period = get_current_period(self.courses)
        refresh_needed = False  # 标记是否需要刷新面板

        for txt in self.textCtrls:
            # 检查文本控件是否对应当前时间段
            if getattr(txt, 'period', None) == current_period:
                desired_color = config['DEFAULT'].get('CurrentCourseColor', '255, 124, 59')  # 当前时间段的颜色
            else:
                desired_color = config['DEFAULT'].get('FontColor', '108, 215, 244')  # 非当前时间段的颜色

            # 检查颜色是否需要更新
            current_color = getattr(txt, 'current_color', None)  # 获取当前文本控件的颜色属性，如果未设置则返回None
            if str(current_color) != desired_color:
                # 只有在颜色实际需要改变时才更新颜色
                new_color = parse_color(desired_color)  # 解析颜色字符串为wxPython颜色对象
                txt.SetForegroundColour(new_color)  # 更新文本颜色
                setattr(txt, 'current_color', desired_color)  # 更新文本控件的颜色属性标记
                refresh_needed = True  # 需要刷新面板

        if refresh_needed:
            self.panel.Refresh()  # 如果有颜色变化，则刷新面板以更新显示

    def load_courses_for_today(self):
        # 清除原有的课程显示
        for txt in self.textCtrls:
            txt.Destroy()
        self.textCtrls.clear()

        # 判断今天是否有特殊的课程安排（Exception列）
        has_exception = 'Exception' in self.courses.columns and not self.courses['Exception'].isnull().all()
        today_courses = None

        if has_exception:
            today_courses = self.courses[['Period', 'Exception']].dropna()  # 提取“Exception”列并去除空值

        # 如果没有特殊安排，根据今天是星期几加载对应的课程列
        if today_courses is None or today_courses.empty:
            week_days = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]
            today_index = datetime.today().weekday()  # 从0开始，周一为0
            day_column = week_days[today_index]  # 从列表中获取对应的星期字符串

            if day_column in self.courses.columns:  # 检查DataFrame中是否有对应的列
                today_courses = self.courses[['Period', day_column]].dropna()  # 提取并去除空值
            else:
                # 如果今天对应的列不存在，表示没有课程
                today_courses = pd.DataFrame()

        # 显示今日课程信息
        if not today_courses.empty:
            for index, row in today_courses.iterrows():
                # 优先使用“Exception”列的数据，如果没有则使用对应星期的数据
                course_info = row['Exception'] if 'Exception' in row and not pd.isnull(row['Exception']) else row[day_column]
                # 检查是否存在自定义显示时间列"DisplayPeriod"
                if 'DisplayPeriod' in self.courses.columns:
                    display_period = self.courses.at[index, 'DisplayPeriod'] if not pd.isnull(self.courses.at[index, 'DisplayPeriod']) else row['Period']
                else:
                    display_period = row['Period']
                lesson_txt = f"{display_period}: {course_info}"  # 使用自定义时间列或Period列格式化课程信息文本
                txt = wx.StaticText(self.panel, label=lesson_txt)  # 创建静态文本控件显示课程信息
                txt.SetFont(self.font)  # 设置文本字体
                txt.SetForegroundColour(parse_color(config['DEFAULT'].get('FontColor', '108, 215, 244')))  # 设置文本颜色
                self.verticalSizer.Add(txt, flag=wx.ALL, border=config['DEFAULT'].getint('LineSpacing', 10))  # 将文本控件添加到布局管理器
                txt.period = row['Period']  # 存储对应的时间段，以便后续根据时间段更新颜色
                self.textCtrls.append(txt)  # 添加到文本控件列表
        else:
            # 如果今天没有课程
            txt = wx.StaticText(self.panel, label="今天没有课程")  # 创建静态文本控件显示信息
            txt.SetFont(self.font)  # 设置文本字体
            txt.SetForegroundColour(parse_color(config['DEFAULT'].get('FontColor', '108, 215, 244')))  # 设置文本颜色
            self.verticalSizer.Add(txt, flag=wx.ALL, border=config['DEFAULT'].getint('LineSpacing', 10))  # 将文本控件添加到布局管理器
            self.textCtrls.append(txt)  # 添加到文本控件列表

        # 告诉面板重新布局其子控件，确保所有子控件按照sizer的布局来排列
        self.panel.Layout()

        # 调整centeringSizer的大小以适应面板的内容
        # 这将使centeringSizer根据所包含的内容（即verticalSizer中的所有课程信息控件）
        # 调整其大小，确保没有多余空间
        self.centeringSizer.Fit(self.panel)

        # 最后，调用self.Fit()以确保窗口的整体大小可以适应面板（及其内容）
        # 这一步是必要的，特别是在动态添加或移除内容时，确保窗口大小能够自动适应变化
        self.Fit()

        screenWidth, screenHeight = wx.DisplaySize()  # 获取屏幕尺寸
        windowSize = self.GetSize()  # 获取窗口尺寸

        # 根据缩放比例和系统指标调整窗口位置
        if config['DEFAULT'].getboolean('HideTitleBar', True): # 如果隐藏标题栏
            # 根据缩放比例和系统指标调整窗口位置，使窗口位于右上角
            self.SetPosition((screenWidth - windowSize[0] - int((CYSIZE + CYSMCAPTION) * config['DEFAULT'].getfloat('WindowPosition', 0.5)), int((CYSIZE + CYSMCAPTION) * config['DEFAULT'].getfloat('WindowPosition', 0.5)) ))  # 调整窗口位置
        else:
            # 根据缩放比例和系统指标调整窗口位置，使标题栏位于屏幕外
            self.SetPosition((screenWidth - windowSize[0] + CXBORDER + CXEDGE + CXFIXEDFRAME + CXSIZEFRAME, - CYSIZE - CYSMCAPTION))  # 调整窗口位置


def get_current_period(courses):
    # 获取当前时间处于哪个时间段
    now = datetime.now().time()  # 获取当前时间（不包含日期）
    for index, row in courses.iterrows():  # 遍历DataFrame中的每一行
        # 分割时间段字符串，如"08:00-09:00"，并去除空格
        start_time, end_time = row['Period'].split('-')
        # 将字符串时间转换为datetime.time对象以便比较
        start_time = datetime.strptime(start_time.strip(), "%H:%M").time()
        end_time = datetime.strptime(end_time.strip(), "%H:%M").time()
        if start_time <= now <= end_time:  # 判断当前时间是否在这个时间段内
            return row['Period']  # 如果是，返回当前时间段字符串
    return None  # 如果当前时间不在任何一个时间段内，返回None

def get_course_table_path():
    """获取课程表路径"""
    course_table_path = config['DEFAULT'].get('CourseTablePath', '课程表.xlsx') # 获取'DEFAULT'部分的'CourseTablePath'值，如果获取失败则使用'课程表.xlsx'
    if os.path.isabs(course_table_path): # 如果是绝对路径
        return course_table_path # 绝对路径直接return
    else:
        # 如果路径不是绝对路径，补全路径
        return os.path.join(base_dir, course_table_path)

def parse_color(color_str):
    """将字符串形式的颜色转换为wxPython颜色对象"""
    r, g, b = map(int, color_str.split(','))
    return wx.Colour(r, g, b)

config = configparser.ConfigParser()  # 初始化配置解析器
create_or_load_config()  # 执行与配置文件创建和读取相关的函数
data = pd.read_excel(get_course_table_path())  # 读取Excel文件
app = wx.App(False)  # 创建应用程序对象
frame = MainFrame(data, None)  # 创建主窗口
frame.Show(True)  # 显示窗口
app.MainLoop()  # 进入事件循环